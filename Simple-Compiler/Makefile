# Compiler and flags
CXX = g++
CXXFLAGS = -std=c++17 -Wall -g

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# Executable name
TARGET = $(BINDIR)/compiler

# Source files
# List all your .cpp source files here
CPP_SOURCES = $(SRCDIR)/main.cpp \
              $(SRCDIR)/compiler.cpp \
              $(SRCDIR)/codegen.cpp \
              $(SRCDIR)/semantic.cpp \
              $(SRCDIR)/assembly_gen.cpp \
			  $(SRCDIR)/printing_options.cpp

# Generated source files from Flex and Bison
GENERATED_SOURCES = $(SRCDIR)/lex.yy.cpp $(SRCDIR)/parser.tab.cpp

# Object files
# This will automatically create a list of .o files in the OBJDIR
# e.g., src/main.cpp becomes obj/main.o
OBJECTS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(CPP_SOURCES) $(GENERATED_SOURCES))

# Header file generated by Bison
BISON_HEADER = $(SRCDIR)/parser.tab.hpp

# Phony targets are not actual files
.PHONY: all clean

# Default target: build everything
all: $(TARGET)

# Rule to link the final executable
$(TARGET): $(OBJECTS) | $(BINDIR)
	@echo "Linking..."
	$(CXX) $(CXXFLAGS) -o $@ $^

# Rule to compile .cpp files into .o files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp | $(OBJDIR)
	@echo "Compiling $<..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Rule for Flex: generate scanner C++ source from .l file
$(SRCDIR)/lex.yy.cpp: $(SRCDIR)/lexer.l $(BISON_HEADER)
	@echo "Running Flex..."
	flex -o $@ $<

# Rule for Bison: generate parser C++ source and header from .y file
# The header file is a dependency for the lexer and other files.
$(SRCDIR)/parser.tab.cpp $(BISON_HEADER): $(SRCDIR)/parser.y
	@echo "Running Bison..."
	bison -d --verbose -o $(SRCDIR)/parser.tab.cpp $<

# Create directories if they don't exist
$(BINDIR) $(OBJDIR):
	mkdir -p $@

# Clean up build files
clean:
	@echo "Cleaning up..."
	rm -rf $(OBJDIR) $(BINDIR)
	rm -f $(SRCDIR)/lex.yy.cpp $(SRCDIR)/parser.tab.cpp $(SRCDIR)/parser.tab.hpp
	rm -f $(SRCDIR)/parser.output # Bison's verbose output file